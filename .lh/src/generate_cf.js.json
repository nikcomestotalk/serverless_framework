{
    "sourceFile": "src/generate_cf.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1742569724698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1742569724698,
            "name": "Commit-0",
            "content": "const fs = require('fs');\n\nconst templatePath = '../config/template_2.json';\nconst outputPath = '../cloudformation-template.yaml';\n\n// Read the template JSON file\nconst templateData = JSON.parse(fs.readFileSync(templatePath, 'utf8'));\n\nconst cloudFormationTemplate = {\n    AWSTemplateFormatVersion: '2010-09-09',\n    Resources: {\n        LambdaExecutionRole: {\n            Type: 'AWS::IAM::Role',\n            Properties: {\n                AssumeRolePolicyDocument: {\n                    Version: '2012-10-17',\n                    Statement: [\n                        {\n                            Effect: 'Allow',\n                            Principal: { Service: 'lambda.amazonaws.com' },\n                            Action: 'sts:AssumeRole',\n                        },\n                    ],\n                },\n                Policies: [\n                    {\n                        PolicyName: 'LambdaBasicExecution',\n                        PolicyDocument: {\n                            Version: '2012-10-17',\n                            Statement: [\n                                {\n                                    Effect: 'Allow',\n                                    Action: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents'],\n                                    Resource: '*',\n                                },\n                            ],\n                        },\n                    },\n                ],\n            },\n        },\n    },\n};\n\nObject.entries(templateData).forEach(([functionName, config]) => {\n    const lambdaResourceName = `${functionName}Lambda`;\n    const apiGatewayResourceName = `${functionName}ApiGateway`;\n\n    // Define Lambda function\n    cloudFormationTemplate.Resources[lambdaResourceName] = {\n        Type: 'AWS::Lambda::Function',\n        Properties: {\n            FunctionName: functionName,\n            Handler: config.handler,\n            Role: { 'Fn::GetAtt': ['LambdaExecutionRole', 'Arn'] },\n            Runtime: 'nodejs18.x',\n            Code: {\n                S3Bucket: { Ref: 'S3BucketName' },\n                S3Key: { Ref: 'LambdaZipFile' },\n            },\n            MemorySize: 128,\n            Timeout: 10,\n        },\n    };\n\n    // Define API Gateway for each function\n    if (config.events) {\n        config.events.forEach((event, index) => {\n            if (event.http) {\n                const { path, method, cors } = event.http;\n                const apiResource = `${apiGatewayResourceName}${index}`;\n\n                cloudFormationTemplate.Resources[apiResource] = {\n                    Type: 'AWS::ApiGateway::Method',\n                    Properties: {\n                        HttpMethod: method.toUpperCase(),\n                        AuthorizationType: 'NONE',\n                        Integration: {\n                            IntegrationHttpMethod: 'POST',\n                            Type: 'AWS_PROXY',\n                            Uri: {\n                                'Fn::Sub': [\n                                    'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations',\n                                    { LambdaArn: { 'Fn::GetAtt': [lambdaResourceName, 'Arn'] } },\n                                ],\n                            },\n                        },\n                    },\n                };\n\n                if (cors) {\n                    cloudFormationTemplate.Resources[apiResource].Properties.Integration.IntegrationResponses = [\n                        {\n                            StatusCode: 200,\n                            ResponseParameters: {\n                                'method.response.header.Access-Control-Allow-Origin': \"'*'\",\n                            },\n                        },\n                    ];\n                }\n            }\n        });\n    }\n});\n\n// Write the generated CloudFormation template to a file\nfs.writeFileSync(outputPath, JSON.stringify(cloudFormationTemplate, null, 2));\n\nconsole.log(`CloudFormation template generated at ${outputPath}`);\n"
        }
    ]
}